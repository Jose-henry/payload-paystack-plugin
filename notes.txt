# Paystack Plugin for Payload CMS — Implementation Notes


**⚠️ NOTE:**

> As of 2025, Paystack webhooks only support a limited number of event types (see below). This means **most collections cannot be synced from Paystack to Payload via webhook.**
>
> **For best data integrity, always make changes in Payload (not Paystack),** since webhooks will NOT cover most update scenarios (e.g., customer, plan, or product changes). We recommend treating Payload as your "single source of truth."

## Currency & Amount Handling

* Supported: NGN (Naira, Kobo), USD (Dollar, Cent), GHS (Cedi, Pesewa), ZAR (Rand, Cent), KES (Shilling, Cent)
* Amounts are **automatically converted to subunits** (×100, e.g., Naira to Kobo) for create and update operations. This is handled internally by the plugin.
* In **test mode** (`sk_test_xxx`), only NGN is enabled by default. Other currencies require switching to live mode and activation on your Paystack dashboard.
* In **live mode** (`sk_live_xxx`), you can enable additional currencies in your Paystack dashboard.

---

## API Integration

* Use the `/paystack/rest` endpoint to proxy any Paystack API call securely from your authenticated Payload app (browser or backend).
* Use `/paystack/webhook` to receive and process incoming Paystack webhook events. Set this in your Paystack dashboard as: `https://yourdomain.com/paystack/webhook` (for local dev, tunnel via ngrok).
* **Collections are mapped to Paystack resources** in the plugin `sync` config. You control if they're editable or read-only in Payload.

---

## Making Paystack API Requests

You have three ways to interact with Paystack:

1. **Using the REST Proxy Endpoint** (`/paystack/rest`):
   ```ts
   await fetch('/paystack/rest', {
     method: 'POST',
     headers: { 'Content-Type': 'application/json' },
     credentials: 'include',
     body: JSON.stringify({
       paystackPath: '/transaction/initialize',
       paystackMethod: 'POST',
       paystackArgs: [{ email: 'customer@email.com', amount: 20000 }]
     })
   });
   ```

2. **Direct Paystack API Calls**:
   ```ts
   await fetch('https://api.paystack.co/transaction/initialize', {
     method: 'POST',
     headers: {
       'Authorization': `Bearer ${process.env.PAYSTACK_SECRET_KEY}`,
       'Content-Type': 'application/json'
     },
     body: JSON.stringify({
       email: 'customer@email.com',
       amount: 20000
     })
   });
   ```

3. **Using the paystackProxy Utility**:
   ```ts
   import { paystackProxy } from 'paystack-payload-cms/utilities';
   
   const response = await paystackProxy({
     paystackPath: '/transaction/initialize',
     paystackMethod: 'POST',
     paystackArgs: [{ email: 'customer@email.com', amount: 20000 }]
   });
   ```

The `paystackProxy` utility is recommended for backend code as it:
- Maintains consistent error handling
- Handles authentication automatically
- Provides type safety
- Keeps your Paystack API calls organized

---

## REST Proxy Security Considerations

**⚠️ Important Security Warning:**

The `rest: true` configuration option in the plugin opens up the `/api/paystack/rest` endpoint, allowing authenticated users to directly interact with the Paystack REST API. While convenient for development, this poses significant security risks in production:

1. **Security Risks:**
   - Any authenticated user gets unrestricted access to Paystack's API
   - Potential for unauthorized transactions or data exposure
   - Risk of API key exposure or misuse
   - No built-in rate limiting or request validation

2. **Development vs Production:**
   - Development: Using `rest: true` is acceptable for testing
   - Production: Strongly recommended to create your own secure endpoints


Remember: The REST proxy is a development convenience that should be used with extreme caution in production environments.

---

## Deleting Customers & Blacklisting

* **Deleting a customer in Payload only blacklists (risk\_action = "deny") in Paystack**—actual customer deletion via API is not supported by Paystack. Your Payload customer is marked as deleted and the equivalent Paystack customer is blacklisted.
* You can enable a "Blacklisted on Paystack" toggle in your customer collection via `blacklistCustomerOption: true`.
* Blacklist status is not synced via webhooks (Paystack limitation), but you can enable polling by setting polling parameter in plugin confgi to true, to fetch blacklist status from Paystack at regular intervals.

DELETE BEHAVIOR:
- Deleting a record in Payload is destructive and will:
  1. Delete from Payload
  2. If paystackID exists, attempt to delete/blacklist in Paystack
  3. This happens regardless of skipSync flag
- skipSync only prevents creation/updates, not deletion
- If no paystackID exists, no Paystack API call is made
- For customers, deletion is converted to blacklisting
- For other resources, actual deletion is attempted

---

## Read-Only Collections

* Collections like `transaction`, `refund`, `order`, and `subscription` are best set to read-only in Payload for data validity, as these are synced directly from Paystack. However, you decide the access level—use Payload's `access` property.
* Example:

```typescript
{
  slug: 'transaction',
  access: {
    create: () => false,
    update: () => false,
    delete: () => false,
    read: () => true,
  },
  fields: [ ... ]
}
```

* These are synced by the plugin via REST, polling, or webhooks, according to your `sync` config.

---

## Plugin Configuration Example

```typescript
paystackPlugin({
  paystackSecretKey: 'sk_test_xxx',
  webhookSecret: 'sk_test_xxx',
  rest: true,
  logs: true,
  blacklistCustomerOption: true,
  testMode: false, // If true, requests are simulated only
  defaultCurrency: 'NGN',
  polling: false
  pollingInterval: 60 * 60 * 1000, // Poll blacklist status every hour
  sync: [ ... ]
})
```

---

## Test Mode & Live Mode

* Use `sk_test_xxx` in development and set test mode in your Paystack dashboard.
* Use `sk_live_xxx` in production/live mode and activate additional currencies as needed.
* The plugin parameter `testMode: true` simulates all Paystack requests (no live API calls)—useful for testing and CI.

---

## REST Proxy Usage

```js
fetch('/paystack/rest', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  credentials: 'include',
  body: JSON.stringify({
    paystackPath: '/transaction/initialize',
    paystackMethod: 'POST',
    paystackArgs: [{ email: 'demo@domain.com', amount: 10000 }]
  })
})
```

---

## Best Practices & Troubleshooting

* Map all fields correctly in your sync config.
* Make collections read-only if you want true Paystack data integrity.
* Enable logs for development/debugging.
* Always use your secret key for both `paystackSecretKey` and `webhookSecret`.
* Use polling if you want two-way blacklist sync. Webhooks do **not** cover blacklist/risk actions.
* Test webhooks locally with ngrok.

---

## Limitations & Caveats

* Customer deletion in Paystack is not possible; the plugin blacklists instead.
* Rate limits apply for the API; plugin includes retry logic.
* Data integrity for transaction/refund/order/subscription is best maintained by making those collections read-only in Payload.
* If you see missing data or unsynced fields, check logs and your field mappings.
* Changes made in Paystack will NOT sync back to Payload for most collections (except for the supported webhook events above).

* For reliability, always make your changes in Payload, not Paystack.


---

## Developer Tips

* Always guard your REST endpoint—do not expose it publicly.
* Keep your secret keys safe.
* Both environment variables should be set to your Paystack secret key:

```env
PAYSTACK_SECRET_KEY=sk_test_xxx
PAYSTACK_WEBHOOK_SECRET=sk_test_xxx
```

* If you want two-way blacklist sync, set up an `onInit` handler as shown in the README.

---

## Resources

* [Paystack API Docs](https://paystack.com/docs/api)
* [Payload CMS Docs](https://payloadcms.com/docs)

──────────────────────────
Happy coding! 🚀
